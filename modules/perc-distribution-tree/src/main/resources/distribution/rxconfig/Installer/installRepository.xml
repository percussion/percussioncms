<project name="installRepository" default="installRepository" >

    <property name="install.dir" location="C:\DevEnv\Installs\dev"/>
    <property name="data.dir" location="${install.dir}/rxconfig/Installer/data"/>
    <property name="customer.jdbc.drivers" location="${install.dir}/jetty/base/lib/jdbc"/>
    <dirname property="install.src" file="${ant.file}"/>
    <property name="install.configdir.src" location="${install.src}/rxconfig/Installer"/>
    <property name="perc.jdbc.drivers" location="${install.dir}/jetty/defaults/lib/perc"/>
    <property name="install.configdir.src" location="${install.src}/rxconfig/Installer"/>
    <property name="rxrepository.properties.new" location="${install.configdir.src}/rxrepository.properties"/>
    <property name="rxrepository.properties" location="${install.dir}/rxconfig/Installer/rxrepository.properties"/>

    <target name="installRepository" depends="init,repository_properties">

        <!-- Install Rhythmyx Tables -->
        <echo>Installing repository...</echo>

        <mkdir dir="${install.dir}/logs"/>

        <echo>Dropping selected tables...</echo>
        <PSExecSQLStmt rootDir="${install.dir}"
                       printExceptionStackTrace="true"
                       qualifyViewNames="PSX_QJOB_LISTENERS"
                       sql="DROP TABLE PSX_QJOB_LISTENERS"
                       sqlOracle="DROP TABLE PSX_QJOB_LISTENERS"
                       sqlMysql="DROP TABLE IF EXISTS PSX_QJOB_LISTENERS"
                       sqlDerby="DROP TABLE PSX_QJOB_LISTENERS"
                       failonerror="false"
                       silenceerrors="false"
        />

        <PSExecSQLStmt rootDir="${install.dir}"
                       printExceptionStackTrace="true"
                       qualifyViewNames="PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
                       sql="DROP TABLE PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
                       sqlOracle="DROP TABLE PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
                       sqlMysql="DROP TABLE IF EXISTS PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
                       sqlDerby="DROP TABLE PSX_PUBLICATION_SITE_ITEM_BAK_PATCH"
                       failonerror="false"
                       silenceerrors="false"
        />

        <!-- Cleanup to make sure new FK can be created -->
        <PSExecSQLStmt rootDir="${install.dir}"
                       printExceptionStackTrace="true"
                       qualifyTableNames="PSX_CONTENTCHANGEEVENT,CONTENTSTATUS"
                       sql="DELETE FROM PSX_CONTENTCHANGEEVENT where CONTENTID not in (SELECT CONTENTID from CONTENTSTATUS)"
                       failonerror="false"
                       silenceerrors="false"
        />

        <PSExecSQLStmt rootDir="${install.dir}"
                       printExceptionStackTrace="true"
                       qualifyTableNames="PSX_CONTENTCHANGEEVENT,RXSITES"
                       sql="DELETE FROM PSX_CONTENTCHANGEEVENT where SITEID  not in (SELECT SITEID  from RXSITES)"
                       failonerror="false"
                       silenceerrors="false"
        />

        <echo>dropping views..</echo>
        <PSExecSQLStmt rootDir="${install.dir}" printExceptionStackTrace="true"
                       qualifyViewNames="RXSITEITEMS" sql="DROP VIEW RXSITEITEMS"
                       sqlMysql="DROP VIEW IF EXISTS RXSITEITEMS"
                       failonerror="false"
                       silenceerrors="false"/>


        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="CONTENTVARIANTS"
                sql="DROP VIEW CONTENTVARIANTS"
                failonerror="false"
                silenceerrors="false"
        />


        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="RXSITECOMMUNITY"
                sql="DROP VIEW RXSITECOMMUNITY"
                failonerror="false"
                silenceerrors="false"
        />


        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="RXCONTENTTYPECOMMUNITY"
                sql="DROP VIEW RXCONTENTTYPECOMMUNITY"
                failonerror="false"
                silenceerrors="false"
        />


        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="RXVARIANTCOMMUNITY"
                sql="DROP VIEW RXVARIANTCOMMUNITY"
                failonerror="false"
                silenceerrors="false"
        />

        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="RXWORKFLOWCOMMUNITY"
                sql="DROP VIEW RXWORKFLOWCOMMUNITY"
                failonerror="false"
                silenceerrors="false"
        />
        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="PSX_DISPLAYFORMATPROPERTY_VIEW"
                sql="DROP VIEW PSX_DISPLAYFORMATPROPERTY_VIEW"
                failonerror="false"
                silenceerrors="false"
        />

        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="PSX_SEARCHPROPERTIES_VIEW"
                sql="DROP VIEW PSX_SEARCHPROPERTIES_VIEW"
                failonerror="false"
                silenceerrors="false"
        />

        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="PSX_MENUVISIBILITY_VIEW"
                sql="DROP VIEW PSX_MENUVISIBILITY_VIEW"
                failonerror="false"
                silenceerrors="false"
        />
        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="PSX_COMMUNITY_PERMISSION_VIEW"
                sql="DROP VIEW PSX_COMMUNITY_PERMISSION_VIEW"
                failonerror="false"
                silenceerrors="false"
        />


        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="RXPUBDOCS"
                sql="DROP VIEW RXPUBDOCS"
                failonerror="false"
                silenceerrors="false"
        />

        <!-- Delete orphan records from PSX_WB_HIERARCHY_NODE_PROP -->

        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyTableNames="PSX_WB_HIERARCHY_NODE_PROP,PSX_WB_HIERARCHY_NODE"
                sql="DELETE FROM PSX_WB_HIERARCHY_NODE_PROP WHERE NODE_ID NOT IN (SELECT NODE_ID FROM PSX_WB_HIERARCHY_NODE)"
                failonerror="false"
                silenceerrors="false"
        />
<!-- update table schema -->
        <echo> updating table schemas</echo>

        <property name="tableDataSources" value="${data.dir}/cmsTableData.xml" />
        <property name="tableDefSources" value="${data.dir}/cmsTableDef.xml" />

        <PSTableAction rootDir="${install.dir}"
                       repositoryLocation="${rxrepository.properties}"
                       tableFactoryLogFile="${install.dir}/rxconfig/Installer/tableFactory.log"
                       tableData="${tableDataSources}"
                       tableDef="${tableDefSources}" failonerror="true" silenceerrors="false" />

        <echo>Repository installation complete...</echo>

        <echo>creating views</echo>
        <!-- CONTENTVARIANTS -->
        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyTableNames="PSX_TEMPLATE,CONTENTTYPES,PSX_CONTENTTYPE_TEMPLATE"
                qualifyViewNames="CONTENTVARIANTS"
                sql="CREATE VIEW CONTENTVARIANTS AS SELECT T.TEMPLATE_ID VARIANTID, C.CONTENTTYPEID, T.LABEL VARIANTDESCRIPTION, T.STYLESHEETNAME, '../assembler/render' ASSEMBLYURL, T.OUTPUTFORMAT, T.AATYPE, T.DESCRIPTION, T.PUBLISHWHEN, T.LOCATIONPREFIX, T.LOCATIONSUFFIX FROM PSX_TEMPLATE T, CONTENTTYPES C, PSX_CONTENTTYPE_TEMPLATE CT WHERE T.TEMPLATE_ID = CT.TEMPLATE_ID AND C.CONTENTTYPEID = CT.CONTENTTYPEID"
                failonerror="false"
                silenceerrors="false"
        />

        <!-- PSX_COMMUNITY_PERMISSION_VIEW -->
        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyTableNames="PSX_ACLS,PSX_ACLENTRIES,PSX_ACLENTRYPERMISSIONS,RXCOMMUNITY"
                qualifyViewNames="PSX_COMMUNITY_PERMISSION_VIEW"
                sql="create view PSX_COMMUNITY_PERMISSION_VIEW as select acl.OBJECTID, acl.OBJECTTYPE, com.COMMUNITYID, aclperm.PERMISSION from PSX_ACLS acl, PSX_ACLENTRIES entry, PSX_ACLENTRYPERMISSIONS aclperm, RXCOMMUNITY com where acl.ID = entry.ACLID and entry.ID = aclperm.ENTRYID and entry.TYPE = 10 and entry.NAME = com.NAME and aclperm.PERMISSION = 40 union select acl.OBJECTID, acl.OBJECTTYPE, com.COMMUNITYID, aclperm.PERMISSION from PSX_ACLS acl, PSX_ACLENTRIES entry, PSX_ACLENTRYPERMISSIONS aclperm, RXCOMMUNITY com where acl.ID = entry.ACLID and entry.ID = aclperm.ENTRYID and entry.TYPE = 10 and entry.NAME = 'AnyCommunity' and aclperm.PERMISSION = 40 and com.NAME not in (select entry2.NAME from PSX_ACLENTRIES entry2 where acl.ID = entry2.ACLID and entry2.TYPE = 10)"
                sqlOracle="create view PSX_COMMUNITY_PERMISSION_VIEW as select acl.OBJECTID, acl.OBJECTTYPE, com.COMMUNITYID, aclperm.PERMISSION from PSX_ACLS acl, PSX_ACLENTRIES entry, PSX_ACLENTRYPERMISSIONS aclperm, RXCOMMUNITY com where acl.ID = entry.ACLID and entry.ID = aclperm.ENTRYID and entry.TYPE = 10 and aclperm.PERMISSION = 40 and (entry.NAME = com.NAME or (entry.NAME = 'AnyCommunity' and com.NAME not in (select entry2.NAME from PSX_ACLENTRIES entry2 where acl.ID = entry2.ACLID and entry2.TYPE = 10)))"
                failonerror="true" silenceerrors="false"
        />
        <!-- RXSITECOMMUNITY -->
        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="RXSITECOMMUNITY,PSX_COMMUNITY_PERMISSION_VIEW"
                sql="create view RXSITECOMMUNITY as select p.OBJECTID SITEID, p.COMMUNITYID from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 9 and p.PERMISSION = 40"
                failonerror="true" silenceerrors="false"
        />

        <!-- RXCONTENTTYPECOMMUNITY -->
        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="RXCONTENTTYPECOMMUNITY,PSX_COMMUNITY_PERMISSION_VIEW"
                sql="create view RXCONTENTTYPECOMMUNITY as select p.OBJECTID CONTENTTYPEID, p.COMMUNITYID from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 2 and p.PERMISSION = 40"
                failonerror="true" silenceerrors="false"
        />

        <!-- RXVARIANTCOMMUNITY -->
        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="RXVARIANTCOMMUNITY, PSX_COMMUNITY_PERMISSION_VIEW"
                sql="create view RXVARIANTCOMMUNITY as select p.OBJECTID VARIANTID, p.COMMUNITYID from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 4 and p.PERMISSION = 40"
                failonerror="true" silenceerrors="false"
        />

        <!-- RXWORKFLOWCOMMUNITY -->
        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyViewNames="RXWORKFLOWCOMMUNITY, PSX_COMMUNITY_PERMISSION_VIEW"
                sql="create view RXWORKFLOWCOMMUNITY as select p.OBJECTID WORKFLOWAPPID, p.COMMUNITYID from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 23 and p.PERMISSION = 40"
                failonerror="true" silenceerrors="false"
        />

        <!-- PSX_DISPLAYFORMATPROPERTY_VIEW -->
        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyTableNames="PSX_DISPLAYFORMATPROPERTIES"
                qualifyViewNames="PSX_DISPLAYFORMATPROPERTY_VIEW,PSX_COMMUNITY_PERMISSION_VIEW"
                sql="create view PSX_DISPLAYFORMATPROPERTY_VIEW as select * from PSX_DISPLAYFORMATPROPERTIES union select p.OBJECTID PROPERTYID, 'sys_community' PROPERTYNAME,   ltrim(str(p.COMMUNITYID)) PROPERTYVALUE, 'from acls' DESCRIPTION from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 31"
                sqlOracle="create view PSX_DISPLAYFORMATPROPERTY_VIEW as select * from PSX_DISPLAYFORMATPROPERTIES union select p.OBJECTID PROPERTYID, 'sys_community' PROPERTYNAME,   ltrim(to_char(p.COMMUNITYID)) PROPERTYVALUE, 'from acls' DESCRIPTION from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 31"
                sqlUDB="create view PSX_DISPLAYFORMATPROPERTY_VIEW as select * from PSX_DISPLAYFORMATPROPERTIES union select p.OBJECTID PROPERTYID, 'sys_community' PROPERTYNAME,   rtrim(char(p.COMMUNITYID)) PROPERTYVALUE, 'from acls' DESCRIPTION from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 31"
                sqlMysql="create view PSX_DISPLAYFORMATPROPERTY_VIEW as select * from PSX_DISPLAYFORMATPROPERTIES union select p.OBJECTID PROPERTYID, 'sys_community' PROPERTYNAME,   rtrim(cast(p.COMMUNITYID AS CHAR)) PROPERTYVALUE, 'from acls' DESCRIPTION from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 31"
                sqlDerby="create view PSX_DISPLAYFORMATPROPERTY_VIEW as select * from PSX_DISPLAYFORMATPROPERTIES union select p.OBJECTID PROPERTYID, 'sys_community' PROPERTYNAME,   rtrim(char(p.COMMUNITYID)) PROPERTYVALUE, 'from acls' DESCRIPTION from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 31"
                failonerror="true" silenceerrors="false"
        />

        <!-- PSX_SEARCHPROPERTIES -->
        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyTableNames="PSX_SEARCHPROPERTIES"
                qualifyViewNames="PSX_SEARCHPROPERTIES_VIEW,PSX_COMMUNITY_PERMISSION_VIEW"
                sql="create view PSX_SEARCHPROPERTIES_VIEW as select * from PSX_SEARCHPROPERTIES union select p.OBJECTID PROPERTYID, 'sys_community' PROPERTYNAME, ltrim(str(p.COMMUNITYID)) PROPERTYVALUE, 'from acls' DESCRIPTION from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 15 OR p.OBJECTTYPE = 18"
                sqlOracle="create view PSX_SEARCHPROPERTIES_VIEW as select * from PSX_SEARCHPROPERTIES union select p.OBJECTID PROPERTYID, 'sys_community' PROPERTYNAME,   ltrim(to_char(p.COMMUNITYID)) PROPERTYVALUE, 'from acls' DESCRIPTION from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 15 OR p.OBJECTTYPE = 18"
                sqlUDB="create view PSX_SEARCHPROPERTIES_VIEW as select * from PSX_SEARCHPROPERTIES union select p.OBJECTID PROPERTYID, 'sys_community' PROPERTYNAME, rtrim(char(p.COMMUNITYID)) PROPERTYVALUE, 'from acls' PROPERTYDESCRIPTION from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 15 OR p.OBJECTTYPE = 18"
                sqlMysql="create view PSX_SEARCHPROPERTIES_VIEW as select * from PSX_SEARCHPROPERTIES union select p.OBJECTID PROPERTYID, 'sys_community' PROPERTYNAME, rtrim(cast(p.COMMUNITYID AS CHAR)) PROPERTYVALUE, 'from acls' PROPERTYDESCRIPTION from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 15 OR p.OBJECTTYPE = 18"
                sqlDerby="create view PSX_SEARCHPROPERTIES_VIEW as select * from PSX_SEARCHPROPERTIES union select p.OBJECTID PROPERTYID, 'sys_community' PROPERTYNAME, rtrim(char(p.COMMUNITYID)) PROPERTYVALUE, 'from acls' PROPERTYDESCRIPTION from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 15 OR p.OBJECTTYPE = 18"
                failonerror="true" silenceerrors="false"
        />


        <!-- PSX_MENUVISIBILITY_VIEW -->
        <PSExecSQLStmt
                printExceptionStackTrace="true"
                qualifyTableNames="RXMENUVISIBILITY,RXMENUACTION,RXCOMMUNITY,PSX_ACLS"
                qualifyViewNames="PSX_MENUVISIBILITY_VIEW,PSX_COMMUNITY_PERMISSION_VIEW"
                sql="create view PSX_MENUVISIBILITY_VIEW as select * from RXMENUVISIBILITY where VISIBILITYCONTEXT &lt;&gt; '2' union select a.ACTIONID, '2' VISIBILITYCONTEXT, ltrim(str(C.COMMUNITYID)) VALUE, 'from acls' DESCRIPTION from RXMENUACTION a, RXCOMMUNITY C where (select count(*) from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 107 and p.OBJECTID = a.ACTIONID and (C.COMMUNITYID = COMMUNITYID) and p.PERMISSION = 40) = 0 and (select count(*) from PSX_ACLS ACL where OBJECTTYPE = 107 and OBJECTID = a.ACTIONID) &lt;&gt; 0"
                sqlOracle="create view PSX_MENUVISIBILITY_VIEW AS select * from RXMENUVISIBILITY where VISIBILITYCONTEXT &lt;&gt; '2' union select a.ACTIONID, '2' VISIBILITYCONTEXT, ltrim(to_char(C.COMMUNITYID)) VALUE, 'from acls' DESCRIPTION from (select a2.actionid actionid from RXMENUACTION a2 where exists (select * from PSX_ACLS ACL where OBJECTTYPE = 107 and OBJECTID = a2.ACTIONID)) a, RXCOMMUNITY C where C.COMMUNITYID NOT IN (select COMMUNITYID FROM PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 107 and p.OBJECTID = a.ACTIONID)"
                sqlUDB="create view PSX_MENUVISIBILITY_VIEW as select * from RXMENUVISIBILITY where VISIBILITYCONTEXT &lt;&gt; '2' union select a.ACTIONID, '2' VISIBILITYCONTEXT, rtrim(char(C.COMMUNITYID)) VALUE, 'from acls' DESCRIPTION from RXMENUACTION a, RXCOMMUNITY C where (select count(*) from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 107 and p.OBJECTID = a.ACTIONID and (C.COMMUNITYID = COMMUNITYID) and p.PERMISSION = 40) = 0 and (select count(*) from PSX_ACLS ACL where OBJECTTYPE = 107 and OBJECTID = a.ACTIONID) &lt;&gt; 0"
                sqlMysql="create view PSX_MENUVISIBILITY_VIEW as select * from RXMENUVISIBILITY where VISIBILITYCONTEXT &lt;&gt; '2' union select a.ACTIONID, '2' VISIBILITYCONTEXT, rtrim(cast(C.COMMUNITYID AS CHAR)) VALUE, 'from acls' DESCRIPTION from RXMENUACTION a, RXCOMMUNITY C where (select count(*) from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 107 and p.OBJECTID = a.ACTIONID and (C.COMMUNITYID = COMMUNITYID) and p.PERMISSION = 40) = 0 and (select count(*) from PSX_ACLS ACL where OBJECTTYPE = 107 and OBJECTID = a.ACTIONID) &lt;&gt; 0"
                sqlDerby="create view PSX_MENUVISIBILITY_VIEW as select * from RXMENUVISIBILITY where VISIBILITYCONTEXT &lt;&gt; '2' union select a.ACTIONID, '2' VISIBILITYCONTEXT, rtrim(char(C.COMMUNITYID)) VALUE, 'from acls' DESCRIPTION from RXMENUACTION a, RXCOMMUNITY C where (select count(*) from PSX_COMMUNITY_PERMISSION_VIEW p where p.OBJECTTYPE = 107 and p.OBJECTID = a.ACTIONID and (C.COMMUNITYID = COMMUNITYID) and p.PERMISSION = 40) = 0 and (select count(*) from PSX_ACLS ACL where OBJECTTYPE = 107 and OBJECTID = a.ACTIONID) &lt;&gt; 0"
                failonerror="true" silenceerrors="false"
        />


        <!-- RXPUBDOCS -->
        <PSExecSQLStmt printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_DOC" qualifyViewNames="RXPUBDOCS"
                       sql="create view RXPUBDOCS AS
            select STATUS_ID AS PUBSTATUSID,
               CONTENT_ID AS CONTENTID,
               TEMPLATE_ID AS VARIANTID,
               FOLDER_ID AS LOCATIONHASH,
               case STATUS when 0 then 'success' else 'failure' end AS PUBSTATUS,
               PUBLISHING_DATE AS PUBDATE,
               case OPERATION when 0 then 'publish' else 'unpublish' end AS PUBOP,
               LOCATION AS PUBLOCATION,
               ASSEMBLY_URL AS CONTENTURL,
               VERSION AS VERSIONID,
               REVISION_ID AS REVISIONID,
               ELAPSED AS ELAPSETIME,
               REFERENCE_ID
            from PSX_PUBLICATION_DOC"
                       sqlDerby="create view RXPUBDOCS AS
            select STATUS_ID AS PUBSTATUSID,
               CONTENT_ID AS CONTENTID,
               TEMPLATE_ID AS VARIANTID,
               FOLDER_ID AS LOCATIONHASH,
               case when STATUS = 0 then 'success' else 'failure' end AS PUBSTATUS,
               PUBLISHING_DATE AS PUBDATE,
               case when OPERATION = 0 then 'publish' else 'unpublish' end AS PUBOP,
               LOCATION AS PUBLOCATION,
               ASSEMBLY_URL AS CONTENTURL,
               VERSION AS VERSIONID,
               REVISION_ID AS REVISIONID,
               ELAPSED AS ELAPSETIME,
               REFERENCE_ID
            from PSX_PUBLICATION_DOC"
        failonerror="true" silenceerrors="false"
        />

        <!-- RXSITEITEMS -->
        <PSExecSQLStmt printExceptionStackTrace="true" qualifyTableNames="PSX_PUBLICATION_SITE_ITEM"
                       qualifyViewNames="RXSITEITEMS,RXPUBDOCS"
                       sql="create view RXSITEITEMS AS
              select  PD.PUBSTATUSID,
                 PD.CONTENTID,
                 PD.VARIANTID,
                 PD.LOCATIONHASH,
                 PD.PUBSTATUS,
                 PD.PUBDATE,
                 PD.PUBOP AS PUBOPERATION,
                 PD.PUBLOCATION AS LOCATION,
                 PD.CONTENTURL,
                 PD.VERSIONID,
                 PD.REVISIONID,
                 PD.ELAPSETIME,
                 PD.REFERENCE_ID,
                 PSI.SITE_ID AS SITEID,
                 PSI.CONTEXT_ID AS CONTEXT
              from PSX_PUBLICATION_SITE_ITEM PSI inner join RXPUBDOCS PD
              on PSI.REFERENCE_ID = PD.REFERENCE_ID"
                       failonerror="true" silenceerrors="false"
        />

        <PSExecSQLStmt printExceptionStackTrace="true" qualifyTableNames="PSX_CONTENTCHANGEEVENT"
                       qualifyViewNames=""
                       sql="ALTER TABLE PSX_CONTENTCHANGEEVENT ADD FOREIGN KEY (SITEID) REFERENCES RXSITES(SITEID)"
                       failonerror="true" silenceerrors="false"
        />

        <PSExecSQLStmt printExceptionStackTrace="true" qualifyTableNames="RXS_CT_GENERIC"
                       qualifyViewNames=""
                       sqlSqlServer="sp_rename 'RXS_CT_GENERIC.USAGE', 'PUSAGE', 'COLUMN';"
                       sql="ALTER TABLE RXS_CT_GENERIC rename column USAGE to PUSAGE;"
                       failonerror="false" silenceerrors="true"
        />
<!-- There is an issue altering this table column to not null, thus taking this hack -->
        <PSExecSQLStmt printExceptionStackTrace="true" qualifyTableNames="PSX_BINARYMETAENTRY "
                       qualifyViewNames=""
                       sqlSqlServer="if not exists (select * from PSX_BINARYMETAENTRY) drop table PSX_BINARYMETAENTRY;"
                       failonerror="false" silenceerrors="true"
        />

    </target>

    <target name="init">
        <echo>Install Directory is ${install.dir}</echo>
        <PSAction rootDir="${install.dir}"/>
    </target>


    <target name="repository_properties">
        <if>
            <isset property="PWD"/>
            <then>
                <echo>Setting repository password</echo>
                <propertyfile file="${rxrepository.properties}"
                              comment="Repository Properties">
                    <entry key="PWD" value="${PWD}"/>
                    <entry key="PWD_ENCRYPTED" value="N"/>
                </propertyfile>
            </then>
        </if>

        <PSMakeLasagna root="${install.dir}"/>
    </target>

    <target name="exportDB">
        <PSExportDatabase rootDir="${install.dir}" tabledatafile="${data.dir}/cmsTableData.xml" tabledeffile="${release.configdir}/cmsTableDef.xml"/>
    </target>
    <target name="exportDBsnapshot" depends="init,repository_properties" >
        <echo>exporting database</echo>
        <PSExportDatabase rootDir="${install.dir}" tabledatafile="${data.dir}/${start.DSTAMP}_${start.TSTAMP}/cmsTableData.xml" tabledeffile="${data.dir}/${start.DSTAMP}_${start.TSTAMP}/cmsTableDef.xml" />
    </target>

</project>
