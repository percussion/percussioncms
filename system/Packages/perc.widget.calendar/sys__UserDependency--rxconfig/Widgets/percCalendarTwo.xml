<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~     Percussion CMS
  ~     Copyright (C) 1999-2020 Percussion Software, Inc.
  ~
  ~     This program is free software: you can redistribute it and/or modify
  ~     it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
  ~
  ~     This program is distributed in the hope that it will be useful,
  ~     but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~     GNU Affero General Public License for more details.
  ~
  ~     Mailing Address:
  ~
  ~      Percussion Software, Inc.
  ~      PO Box 767
  ~      Burlington, MA 01803, USA
  ~      +01-781-438-9900
  ~      support@percussion.com
  ~      https://www.percussion.com
  ~
  ~     You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>
  -->

<!--
   [percCalendarTwo - Version 1.1.0]
   
-->
<Widget>
   <WidgetPrefs title="Calendar 2.0"
        contenttype_name="percCalendarAsset"
        description="Enables integration of Google Calendar with Percussion"
        category="Other"
        author="Percussion Software Inc"
        thumbnail="/rx_resources/widgets/percCalendarTwo/images/calendarIcon.png"
        preferred_editor_width="900"
        preferred_editor_height="600"
        is_responsive="true"/>

    <UserPref name="perc_layout_type"
      display_name="Choose layout type"
      default_value="Calendar"
      datatype="enum">
      <EnumValue value="calendar" display_value="Calendar" />
      <EnumValue value="list" display_value="Event List" />
    </UserPref>

    <UserPref name="perc_enable_view_toggle_buttons"
      display_name="Enable view toggle buttons"
      default_value="false"
      datatype="bool"/>

    <UserPref name="perc_max_results"
      display_name="&lt;span style=&quot;font-size:125%;&quot;&gt;&lt;br&gt;&lt;b&gt;Event List View Options&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;Event List Limit"
      default_value="5"
      datatype="number"/>

    <UserPref name="perc_event_title_tag_type"
      display_name="Format for event title"
      default_value="p"
      datatype="enum">
      <EnumValue value="p" display_value="Paragraph" />
      <EnumValue value="h2" display_value="Heading 2" />
      <EnumValue value="h3" display_value="Heading 3" />
      <EnumValue value="h4" display_value="Heading 4" />
      <EnumValue value="h5" display_value="Heading 5" />
      <EnumValue value="h6" display_value="Heading 6" />
    </UserPref>
  
    <UserPref name="enableCalenderIcon"
      display_name="Enable calendar icon"
      default_value="false"
      datatype="bool"/>

    <UserPref name="showEventDate"
      display_name="Show event date"
      default_value="true"
      datatype="bool"/>

    <UserPref name="eventDateFormat"
      display_name="Format of event date"
      default_value="dddd, MMMM Do YYYY"
      datatype="string" />

    <UserPref name="showEventTime"
      display_name="Show event time"
      default_value="true"
      datatype="bool"/>

    <UserPref name="eventTimeFormat"
       display_name="Format of event time"
       default_value="h:mmA"
       datatype="string" />

    <UserPref name="perc_calendar_view" 
      display_name="&lt;span style=&quot;font-size:125%;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Calendar View Options&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;Choose calendar view"
      default_value="full"
      datatype="enum">
      <EnumValue value="full" display_value="Full calendar" />
      <EnumValue value="mini" display_value="Mini calendar" />
     </UserPref>

    <UserPref name="perc_calendar_type" 
      display_name="Default calendar type"
      default_value="month"
      datatype="enum">
      <EnumValue value="Day" display_value="Day" />
      <EnumValue value="Week" display_value="Week" />
      <EnumValue value="month" display_value="Month" />
    </UserPref>

    <UserPref name="perc_calendar_detail" 
      display_name="Detail Level"
      default_value="basic"
      datatype="enum">
      <EnumValue value="basic" display_value="Basic (times not displayed for week and day views)" />
      <EnumValue value="agenda" display_value="Agenda" />
    </UserPref>

    <UserPref name="perc_show_page_summary"
      display_name="Show summary"
      default_value="false"
      datatype="bool" />

    <UserPref name="perc_start_day" 
      display_name="Start week with"
      default_value="Day_0"
      datatype="enum">
      <EnumValue value="Day_0" display_value="Sunday" />
      <EnumValue value="Day_1" display_value="Monday" />
      <EnumValue value="Day_2" display_value="Tuesday" />
      <EnumValue value="Day_3" display_value="Wednesday" />
      <EnumValue value="Day_4" display_value="Thursday" />
      <EnumValue value="Day_5" display_value="Friday" />
      <EnumValue value="Day_6" display_value="Saturday" />
    </UserPref>

    <UserPref name="perc_time_format" 
      display_name="Time format"
      default_value="ampm"
      datatype="enum">
      <EnumValue value="ampm" display_value="12 hour" />
      <EnumValue value="military" display_value="24 hour" />
    </UserPref>

    <UserPref name="perc_calendar_display_language" 
      display_name="Language"
      default_value="en"
      datatype="enum">
      <EnumValue value="en" display_value="English United States (US)" />
      <EnumValue value="ar-ma" display_value="Arabic Morocco (MA)" />
      <EnumValue value="ar-sa" display_value="Arabic Saudi Arabia (SA)" />
      <EnumValue value="ar-tn" display_value="Arabic Tunisia (TN)" />
      <EnumValue value="bg" display_value="Bulgarian Bulgaria (BG)" />
      <EnumValue value="ca" display_value="Catalan Spain (ES)" />
      <EnumValue value="cs" display_value="Czech Czech Republic (CZ)" />
      <EnumValue value="da" display_value="Danish Denmark (DK)" />
      <EnumValue value="de-at" display_value="German Austria (AT)" />
      <EnumValue value="de" display_value="German Germany (DE)" />
      <EnumValue value="el" display_value="Greek Greece (GR)" />
      <EnumValue value="en-au" display_value="English Australia (AU)" />
      <EnumValue value="en-ca" display_value="English Canada (CA)" />
      <EnumValue value="en-gb" display_value="English United Kingdom (GB)" />
      <EnumValue value="en-ie" display_value="English Ireland (IE)" />
      <EnumValue value="en-nz" display_value="English New Zealand (NZ)" />
      <EnumValue value="es" display_value="Spanish Spain (ES)" />
      <EnumValue value="fi" display_value="Finnish Finland (FI)" />
      <EnumValue value="fr-ca" display_value="French Canada (CA)" />
      <EnumValue value="fr-ch" display_value="French Switzerland (CH)" />
      <EnumValue value="fr" display_value="French France (FR)" />
      <EnumValue value="he" display_value="Hebrew Israel (IL)" />
      <EnumValue value="hi" display_value="Hindi India (IN)" />
      <EnumValue value="hr" display_value="Croatian Croatia (HR)" />
      <EnumValue value="hu" display_value="Hungarian Hungary (HU)" />
      <EnumValue value="id" display_value="Indonesian Indonesia (ID)" />
      <EnumValue value="is" display_value="Icelandic Iceland (IS)" />
      <EnumValue value="it" display_value="Italian Italy (IT)" />
      <EnumValue value="ja" display_value="Japanese Japan (JP)" />
      <EnumValue value="ko" display_value="Korean South Korea (KR)" />
      <EnumValue value="lb" display_value="Arabic Lebanon (LB)" />
      <EnumValue value="lt" display_value="Lithuanian Lithuania (LT)" />
      <EnumValue value="lv" display_value="Latvian Latvia (LV)" />
      <EnumValue value="nb" display_value="Norwegian BokmÃ¥l Norway (NO)" />
      <EnumValue value="nl" display_value="Dutch Netherlands (NL)" />
      <EnumValue value="nn" display_value="Norwegian Nynorsk Norway (NO)" />
      <EnumValue value="pl" display_value="Polish Poland (PL)" />
      <EnumValue value="pt-br" display_value="Portuguese Brazil (BR)" />
      <EnumValue value="pt" display_value="Portuguese Portugal (PT)" />
      <EnumValue value="ro" display_value="Romanian Romania (RO)" />
      <EnumValue value="ru" display_value="Russian Russia (RU)" />
      <EnumValue value="sk" display_value="Slovak Slovakia (SK)" />
      <EnumValue value="sl" display_value="Slovenian Slovenia (SI)" />
      <EnumValue value="sr" display_value="Serbian Serbia (RS)" />
      <EnumValue value="sv" display_value="Swedish Sweden (SE)" />
      <EnumValue value="th" display_value="Thai Thailand (TH)" />
      <EnumValue value="tr" display_value="Turkish Turkey (TR)" />
      <EnumValue value="uk" display_value="Ukrainian Ukraine (UA)" />
      <EnumValue value="vi" display_value="Vietnamese Vietnam (VN)" />
      <EnumValue value="zh-cn" display_value="Chinese China (CN)" />
      <EnumValue value="zh-tw" display_value="Chinese Taiwan (TW)" />
    </UserPref>

    <UserPref name="perc_show_perc_events_button"
        display_name="Display show/hide button for Percussion events"
        required="true"
        datatype="enum" default_value="N">
        <EnumValue value="N" display_value="No" />
        <EnumValue value="Y" display_value="Yes" />
    </UserPref>

    <UserPref name="perc_event_button_label"
      display_name="Percussion event button label"
      default_value="Other"
      datatype="string" />
      <CssPref name="rootclass"
      display_name="CSS root class" 
      datatype="string" />

    <Code type="jexl">
    <!-- This section is used to set up data that will be used in the content section -->
    <![CDATA[##Widget properties
      $widgetProps = $perc.widget.item.properties;
      $perc_layout_type = $widgetProps.get("perc_layout_type");
      $perc_max_results = $widgetProps.get("perc_max_results");
      $perc_enable_calendar_icon = $widgetProps.get("enableCalenderIcon");
      $perc_show_event_date = $widgetProps.get("showEventDate");
      $perc_show_event_time = $widgetProps.get("showEventTime");
      $perc_calendar_view = $widgetProps.get("perc_calendar_view");
      $perc_calendar_type = $widgetProps.get("perc_calendar_type");
      $perc_calendar_detail = $widgetProps.get("perc_calendar_detail");
      $perc_show_page_summary = $widgetProps.get("perc_show_page_summary");
      $perc_calendar_display_language = $widgetProps.get("perc_calendar_display_language");
      $perc_start_day_number = $widgetProps.get("perc_start_day").replace("Day_","");
      $perc_show_perc_events_button = $widgetProps.get("perc_show_perc_events_button");
      $perc_event_button_label = $widgetProps.get("perc_event_button_label");
      $eventDateFormat = $widgetProps.get("eventDateFormat");
      $eventTimeFormat = $widgetProps.get("eventTimeFormat");
      $perc_event_title_tag_type = $widgetProps.get("perc_event_title_tag_type");
      $perc_enable_view_toggle_buttons = $widgetProps.get("perc_enable_view_toggle_buttons");


      $perc_time_format = $widgetProps.get("perc_time_format");
      if($perc_time_format == "ampm")
          $perc_time_format = "hh:mmt";
      else
          $perc_time_format = "HH:mm";

      $pagesInCal = "[]";
      $calTitle = "";
      $calStartDate = "";
      $assetItems = $rx.pageutils.widgetContents($sys.assemblyItem, $perc.widget, null, null);
      $id = "";
      $perc.setWidgetContents($assetItems);
      if ( ! $assetItems.isEmpty() ) {
          $assetItem = $assetItems.get(0);
          $id = $assetItem.id;
          $widgetId = $perc.widget.item.id;
          $calTitle = $assetItem.getNode().getProperty("calendar_title").String;
          $calName = $assetItem.getNode().getProperty("sys_title").String;
          $fullCalendarPage = $assetItem.getNode().getProperty("full_calendar_page").String;
          $calStartDate = $assetItem.getNode().getProperty("calendar_start_date").String;
          $pagesInCal = $rx.pageutils.getPagesForCalendar($calName).toString();
          $data = $assetItem.Node.getProperty('rx:googleSetupData').getString();
          $json = $rx.pageutils.createJsonObject($data);
          $googleCalendarArray = $json.getJSONArray("config");            
          $calendarContentId = $assetItem.Node.getProperty('rx:sys_contentid').getString();
      }

      $rootclass = $perc.widget.item.cssProperties.get('rootclass');

      if(empty($rootclass)){
          $rootclass = "";
      }

      $dsUrl = $rx.pageutils.getDeliveryServer();

      $dynamicListData = $tools.esc.html("{ deliveryurl : '" + $dsUrl + "'}");
    ]]>
  </Code>
  <Content type="velocity">
    <!-- This section defines the rendered content -->
    <![CDATA[
<div class="$!{rootclass} perc-calendar" data="$!dynamicListData">
#if( ! $perc.widgetContents.isEmpty() )##
#set($googleSourceCount = 0)##
#foreach($googleSource in $googleCalendarArray)##
#set($googleSourceCount = $googleSourceCount + 1)##
#end##
#if( $perc_enable_view_toggle_buttons == "true")##
  <div id="perc-toggle-button-container" class="perc-toggle-button-container" >
  <button type="button" id="showCalendarButton-${calendarContentId}-${widgetId}" class="fc-button fc-state-default fc-corner-left fc-corner-right perc-type-toggle" >Calendar View</button>
  <button type="button" id="showListButton-${calendarContentId}-${widgetId}" class="fc-button fc-state-default fc-corner-left fc-corner-right perc-type-toggle" >List View</button>
  </div>
#end##
##
#if($perc.isEditMode() || $perc.isPreviewMode())##
#set($resourcePrefix = "/Rhythmyx")##
#else##
#set($resourcePrefix = "")##
#end##
##
      <link rel="stylesheet" href="$resourcePrefix/web_resources/widgets/calendarTwo/css/fullcalendar.print.css" type="text/css" media="print" />
      <style>
      @media only screen 
      and (max-width: 480px) 
      {
        .fc-left {
          float: left !important;
          display:block !important;
          width: 100% !important;
          margin: 5px !important;
          text-align: center !important;
        }

        .fc-right {
          float: left !important;
          display:block !important;
          width: 100% !important;
          margin: 5px !important;
          text-align: center !important;
        }

        .fc-center {
          float: left !important;
          display:block !important;
          width: 100% !important;
          margin: 5px !important;
          text-align: center !important;
        }
      }

      .perc-full-calendar {
      
        margin: 0 auto;
        font-size: 14px;
      }

      .perc-hide-calendar {
        display: none;
      }

      .perc-calendar-button {
        border: none;
        border-radius: 4px;
        color: white;
        padding: 9px 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;f
        font-size: 12px;
        cursor: pointer;
        margin: 0px;
        margin-top: 5px;
        -moz-user-select: none;
        -webkit-user-select: none;
        -ms-user-select: none;
        user-select: none;
        -o-user-select: none;
      }

      .perc-disabled-calendar-button {
        opacity: 0.6;
      }
      .perc-button-container {
        float: left;
      }

      .perc-calendar-other {
        background-color: #3a87ad;
        color: #ffffff;
      }
      
#foreach($googleSource in $googleCalendarArray)##
        .perc-$googleSource.getString("className") {
        background-color: $googleSource.getString("backgroundColor") !important;
        color: $googleSource.getString("textColor") !important;
        border: $googleSource.getString("backgroundColor") !important;
      }
#end##
      .perc-event-list-template {
        display:none;
      }

      .perc-event-list-element {
        width: 100%;
        padding-bottom:15px;
        #if( $perc_enable_calendar_icon == 'true' )##
        list-style: none;
        #end##
      }

      .perc-cal-icon {
        margin-right: 15px;
        text-align: center;
        padding: 3px;
        text-transform: uppercase;
        float: left;
        display: inline-block;
        background-color: #666;
        color: #FFF;
      }

      .perc-month-mmm {
        padding: 5px 15px;
      }

      .perc-date-dd {
        background-color: #FFF;
        color:#666;
        width: 100%;
        display: block;
        font-size: 25px;
        padding: 5px 0px;
      }

      #perc-event-list-${calendarContentId}-${widgetId} ul {
        margin: 0px;
        padding: 0px;
      }

      #perc-button-container-${calendarContentId}-${widgetId} {
        display:none;
      }

      .perc-type-toggle {
        margin-bottom: 15px;
        padding: 5px;
      }

      </style>        
      
      <script>
      window.addEventListener('DOMContentLoaded', function() { 
      function hideCalendarSource(calendarClass) {
        $('#'+calendarClass+'-button').toggleClass("perc-disabled-calendar-button");
        $('.'+calendarClass).toggleClass("perc-hide-calendar");
      };
      });
      </script>         
      
      #if($perc_calendar_view == "full")##
      <div class ="perc-full-calendar" id="calendar-${calendarContentId}-${widgetId}"></div>
      
      #if( ($googleSourceCount >= 1 || $perc_show_perc_events_button == 'Y'))
      <form>
      <div id="perc-button-container-${calendarContentId}-${widgetId}" class="perc-button-container">
      #foreach($googleSource in $googleCalendarArray)
      <div id="perc-${googleSource.getString('className')}-button" class="perc-calendar-button perc-$googleSource.getString('className')" onClick="hideCalendarSource('perc-${googleSource.getString('className')}')">$googleSource.getString('calendarName')</div>
      #end

      #if($perc_show_perc_events_button == 'Y' && $perc_event_button_label != '')
      <div id="perc-calendar-other-button" class="perc-calendar-button perc-calendar-other" onClick="hideCalendarSource('perc-calendar-other')">$perc_event_button_label</div>
      #end
      </div>
      </form>
      #end

<div id="perc-event-list-template-${calendarContentId}-${widgetId}" class="perc-event-list-template">
    <ul class="perc-list-main">
        <li class="perc-event-list-element perc-list-element">
            <div class="perc-cal-icon">
                <div class="perc-month-mmm">MMM</div>
                <div class="perc-date-dd">DD</div>
            </div>
            <div class="perc-event-info">
                <div class="perc-event-title"><$perc_event_title_tag_type><a class="perc-event-title-link" href="" target="_blank">Event Title</a></$perc_event_title_tag_type></div>
        <div class="perc-event-date">mm/dd/yyyy</div>
                <div class="perc-event-time">Event Time</div>
                </div>
        </li>
    </ul>
</div>
<div id='perc-event-list-${calendarContentId}-${widgetId}' class="perc-event-list">
    <ul></ul>
</div>
      <script>
      window.addEventListener('DOMContentLoaded', function() { 
      /**
      * Extremely important note:
      * The fullcalendar.js file has been modified to make the event list available
      * as a global variable in the Perc namespace by resolving a deferred object. The object is
      * resolved in the reportEvents function. Also, the stock fullcalendar.js file is hard-coded to
      * Retrieve 6 weeks of events. This needed to be changed to allow for events in list view
      * to appear even if they are beyond that 6 week range. The Perc.range property is set below
      * depending on the layout type. This is used in the computeRange method in the JavaScript file.
      * Updating the fullcalendar.js with a future version of the stock file will require a manual change
      * to keep both of these modifications in place.
      **/


      
        $('#perc-event-list-${calendarContentId}-${widgetId}').hide();
      
        // These variables are for event list functionality
        if(!window.Perc) {
            window.Perc = {};
        }
        if(!Perc.events) {
            Perc.events = {};
        }
#if($perc_layout_type == 'list')##
        Perc.range = 52;
#else##
        Perc.range = 6;
#end##
        Perc.events['calendar-${calendarContentId}-${widgetId}'] = jQuery.Deferred();
        var maxResults = $perc_max_results;
        var layoutType = '$perc_layout_type';
        var percShowCalIcon = '$perc_enable_calendar_icon';
        var percShowEventDate = '$perc_show_event_date';
        var percShowEventTime = '$perc_show_event_time';
      
        initializeCalendar();

        if( layoutType == 'calendar' ) {
          $('#perc-button-container-${calendarContentId}-${widgetId}').fadeIn();
        }

        function initializeCalendar() {

        $("#calendar-${calendarContentId}-${widgetId}").fullCalendar({
      
            timeFormat: '${perc_time_format}',
            #if($calStartDate != "")
            defaultDate: '$calStartDate',
            #end
            lang: '${perc_calendar_display_language}',
            firstDay: $perc_start_day_number,
            defaultView: '#if($perc_calendar_type != 'month')$perc_calendar_detail#end$perc_calendar_type',
            header: {
                left: 'title',
                center: 'prev,next today',
                right: 'month,${perc_calendar_detail}Week,${perc_calendar_detail}Day'
            },
        
            eventSources: [
            #if($googleSourceCount > 0)
            #foreach($googleSource in $googleCalendarArray)
                {
                    googleCalendarApiKey: '${googleSource.getString("apiKey")}',
                    googleCalendarId: '${googleSource.getString("calendarId")}',
                    className: 'perc-${googleSource.getString("className")}'
                }#if($velocityCount <= $googleSourceCount),#end
            #end
            #end
            
                {
                    events: function(start, end, timezone, callback)
          {
              #if($perc.isEditMode() || $perc.isPreviewMode())
                  callback($pagesInCal);
              #else
                  /* 
                    * get the results from delivery tier service and return
                    * below we are looking to restrict the amount of information
                    * pulled back from the DTS.  The dates are found and used to
                    * restrict to the current selected month in the calendar.
                    */
                  var start2 = new Date(start._d);
                  var end2 = new Date(end._d);
                  var startMonth = start2.getMonth()+1 < 10 ? '0' + (start2.getMonth()+1) : start2.getMonth()+1;
                  var endMonth = end2.getMonth()+1 < 10 ? '0' + (end2.getMonth()+1) : end2.getMonth()+1;
                  var startDay = start2.getDate() < 10 ? '0' + start2.getDate() : start2.getDate();
                  var endDay = end2.getDate() < 10 ? '0' + end2.getDate() : end2.getDate();
                  var startValue = start2.getFullYear() + '-' + startMonth + '-' + startDay;
                  var endValue = end2.getFullYear() + '-' + endMonth + '-' + endDay;
                  var serviceUrl = "/perc-metadata-services/metadata/dated/get";
                  var dataObj = {"criteria":["type = 'page'", "perc:calendar = '$calName'", "perc:start_date >= '" + startValue + "'","perc:start_date <= '" + endValue + "'"]}
                  // here the last value condition perc:start_Date < is present to prevent duplicate events from populating between first call and second
                  var dataObj2 = {"criteria":["type = 'page'", "perc:calendar = '$calName'", "perc:end_date >= '" + startValue + "'", "perc:start_date < '" + startValue + "'"]}
                  /*
                    * Here we make two calls to the metadata service as a workaround as the backend currently doesn't support OR operations.
                    * @param endOfCall here the function is called twice, when endOfCall is true the callback populates the page with the calendar events
                    * @param firstEvents passes the results from the first metadata call to the second call.
                    */
                  var makeApiCall = function(dataObj, endOfCall, firstEvents) {
                      var deferred = jQuery.Deferred();
                      jQuery.PercServiceUtils.makeXdmJsonRequest(null,serviceUrl,jQuery.PercServiceUtils.TYPE_POST,function(status, results)
                      {
                          if(status == jQuery.PercServiceUtils.STATUS_SUCCESS) {
                              if(endOfCall){
                                if(typeof(firstEvents) === "undefined"){
								    firstEvents = [];
								}
                                callback(firstEvents.concat(jQuery.PercServiceUtils.toJSON(results.data).events));
                          }
                              else
                                  deferred.resolve(jQuery.PercServiceUtils.toJSON(results.data).events);
                          }
                          else {
                              deferred.resolve([]);
                          }
                      }, dataObj);
                      return deferred.promise();
                  }
                  jQuery.when( makeApiCall(dataObj, false, []) ).then(function(events) {
                      makeApiCall(dataObj2, true, events);
                  });
              #end
          },
        className: 'perc-calendar-other',
        
        }
            ],
            editable: false,
            
      dayClick: function(date, allDay, jsEvent, view) {
      if(typeof(percCalenderDayClick) === typeof(Function)){
      // if you need to bind to the dayClick even, define a function with a definition that 
      // looks like function percCalenderDayClick(div_id, object,date,allDay,jsEvent,view)
      percCalenderDayClick("#calendar-${calendarContentId}-${widgetId}",$(this),date,allDay,jsEvent,view);
      }
      },
      eventRender: function(event, element) {
      #if($perc_show_page_summary) 
      event['allDay'] = false;
      if(event.summary !='' && event.summary != null && event.summary != 'undefined') {
      element.qtip({
      content: event.summary,
      style: { 
      name: 'light', // Inherit from preset style,
      tip: true
      },
      position: {
      corner: {
      tooltip: 'bottomMiddle', // Use the corner...
      target: 'topMiddle' // ...and opposite corner
      }
      }     
      });
      }
      #end
      }
     
      });

      } //end initialize calendar

      if( layoutType == 'list' ) {
        $('#calendar-${calendarContentId}-${widgetId}').hide();
        $('.perc-mini-calendar').hide();
        jQuery.when(Perc.events['calendar-${calendarContentId}-${widgetId}']).done( function( resolvedEvents ){
              percProcessEventList(resolvedEvents, maxResults);
        });
      }

      // This method hides the calendar view, shows the list view, and populates the target with the event list
        function percProcessEventList(eventObject, maxResults) {

            $('#perc-event-list-${calendarContentId}-${widgetId}').fadeIn();
      
            //  fullcalendar does not presort the event dates
            eventObject.sort(function(x, y){
                return x.start - y.start;
      });
      
            percCurrentDate = new Date();
       
            //  indentifies the target for the event list, and the template to clone
            var percTargetEventList = $('#perc-event-list-${calendarContentId}-${widgetId}');
            var percEventStructureListRoot = $('#perc-event-list-template-${calendarContentId}-${widgetId} ul li');
            var percEventListElem = percEventStructureListRoot.clone();
            var eventCount = 0;
            var eventIterator = 0;
      
            // Count the total number of possible events to show so later on we can determine if we are on the last event
            jQuery.each(eventObject, function( index, event ){
                if( !(moment(event.start).isBefore(percCurrentDate, 'day')) ) {
                    eventCount++;
                }
      });
      
            jQuery.each(eventObject, function( index, event ){

                //  we only want to show the events in list view that are today's date or later, and no more
                //  events than the designated maxResults
                if ( !(moment(event.start).isBefore(percCurrentDate, 'day')) && eventIterator < maxResults ) {

                    percNewEventListElem = percEventListElem.clone();

                    if ( eventIterator == 0 ) {
                        percNewEventListElem.addClass('perc-list-first');
                    }

                    if ( eventIterator == eventCount || (eventIterator + 1) == maxResults ) {
                        percNewEventListElem.addClass('perc-list-last');
                    }

                    // Check if we are an odd or even value, but remember that eventIterator is starting at zero
                    if( (eventIterator+1) % 2 == 0) {
                        percNewEventListElem.addClass('perc-list-even');
                    }
                    else {
                        percNewEventListElem.addClass('perc-list-odd');
                    }

                    if(!(event.url)) {
                            percNewEventListElem.find('a').removeAttr("href");
                    }
                    else {
                        percNewEventListElem.find('a').attr('href', event.url);
                    }

                    if( percShowCalIcon == 'false' ) {
                        percNewEventListElem.find('.perc-cal-icon').remove();
                    }
            if( percShowEventDate == 'false' ) {
                        percNewEventListElem.find('.perc-event-date').remove();
                    }
            if( percShowEventTime == 'false' ) {
              percNewEventListElem.find('.perc-event-time').remove();
            }

            percNewEventListElem.find('.perc-event-date').text(moment(event.start).format("${eventDateFormat}"));
                    percNewEventListElem.find('.perc-month-mmm').text(moment(event.start).format("MMM").toUpperCase());
                    percNewEventListElem.find('.perc-date-dd').text(moment(event.start).format("D"));
                    percNewEventListElem.find('.perc-event-time').text(moment(event.start).format("${eventTimeFormat}"));
            if(event.end) {
              percNewEventListElem.find('.perc-event-time').append(' - ' + moment(event.end).format("${eventTimeFormat}"));
            }
                    percNewEventListElem.find('.perc-event-title-link').text(event.title);

                    // Populates the target container with the event item
                    $('#perc-event-list-${calendarContentId}-${widgetId} ul').append(percNewEventListElem);

                    eventIterator++;

                }   // end if event is before today's date and does not exceed max results

            }); // end each eventObject

        }   // end function percProcessEventList


      $('#showCalendarButton-${calendarContentId}-${widgetId}').on("click", function() {
        $('#perc-event-list-${calendarContentId}-${widgetId}').hide();
        Perc.range = 6;
        $('#calendar-${calendarContentId}-${widgetId}').fadeIn().fullCalendar( 'destroy' );
        initializeCalendar();
        $('#perc-button-container-${calendarContentId}-${widgetId}').fadeIn();
      });
      $('#showListButton-${calendarContentId}-${widgetId}').on("click",function() {
        $('#perc-button-container-${calendarContentId}-${widgetId}').hide();
        $('#calendar-${calendarContentId}-${widgetId}').fullCalendar( 'destroy' );
        Perc.events['calendar-${calendarContentId}-${widgetId}'] = jQuery.Deferred();
        jQuery.when(Perc.events['calendar-${calendarContentId}-${widgetId}']).done( function( resolvedEvents ){
              percProcessEventList(resolvedEvents, maxResults);
        });
        Perc.range = 52;
        $('#perc-event-list-${calendarContentId}-${widgetId}').fadeIn();
        $('#perc-event-list-${calendarContentId}-${widgetId} ul').empty();
        $('#calendar-${calendarContentId}-${widgetId}').show();
        initializeCalendar();
          $('#calendar-${calendarContentId}-${widgetId}').hide();
        });
    });
      </script>
      

    #else##
    #set($caljQuery="$")##
                    <div class="perc-mini-calendar" id="perc-mini-calendar-$id"></div>
                    <script>
                    window.addEventListener('DOMContentLoaded', function() { 
                            tempDateArray = [];
                            dateWithData = [];
                            #if($perc.isEditMode() || $perc.isPreviewMode())
                               tempDateArray = $pagesInCal; 
                               
                               // prepare a temp array of dates which has event associated with it
                               for (var i = 0; i < tempDateArray.length; i++) {
                                   dateWithData.push(tempDateArray[i].start);
                               }

                              ${caljQuery}.datepicker.setDefaults( ${caljQuery}.datepicker.regional['${perc_calendar_display_language}'] );

                               $("#perc-mini-calendar-$id").datepicker({
                                   beforeShowDay: highlightDays,
                                   onSelect: function(dateText, inst) {
                                       #if($perc.isEditMode() || $perc.isPreviewMode())
                                           return;
                                       #else
                                           clickedDate = dateText.replace(/\//g, ',');
                                           var fullCalendarPage = '$fullCalendarPage';
                                           window.location.href =  fullCalendarPage + "?startDate=" + clickedDate;
                                       #end    
                                   }
                               });

                            #else
                                //get the results from delivery tier service and return
                                var serviceUrl = "/perc-metadata-services/metadata/dated/get";
                                var dataObj = {"criteria":["type = 'page'", "perc:calendar = '$calName'"]}
                                jQuery.PercServiceUtils.makeXdmJsonRequest(null,serviceUrl,jQuery.PercServiceUtils.TYPE_POST,function(status, results)
                                {
                                    if(status == jQuery.PercServiceUtils.STATUS_SUCCESS){
                                        tempDateArray = jQuery.PercServiceUtils.toJSON(results.data).events;

                                     // prepare a temp array of dates which has event associated with it
                                     for (var i = 0; i < tempDateArray.length; i++) {
                                         dateWithData.push(tempDateArray[i].start);
                                     }

                                     ${caljQuery}.datepicker.setDefaults( ${caljQuery}.datepicker.regional['${perc_calendar_display_language}'] );

                                     $("#perc-mini-calendar-$id").datepicker({
                                         beforeShowDay: highlightDays,
                                         onSelect: function(dateText, inst) {
                                             #if($perc.isEditMode() || $perc.isPreviewMode())
                                                 return;
                                             #else
                                                 clickedDate = dateText.replace(/\//g, ',');
                                                 var fullCalendarPage = '$fullCalendarPage';
                                                 window.location.href =  fullCalendarPage + "?startDate=" + clickedDate;
                                             #end    
                                         }
                                     });
                                    }
                                    else{
                                        if (typeof(callback) != "undefined"){
                                            tempDateArray = callback([]);
                                        }
                                    }
                                }, dataObj);
                            #end

                        
                            //Higlight the date in mini-calendar which has event associated with it.
                            function highlightDays(date) {
                                for (var i = 0; i < dateWithData.length; i++) {
                                    if (new Date(dateWithData[i]).toString().substring(0, 15) == date.toString().substring(0, 15)) {
                                        return [true, 'highlight'];
                                    }
                                  }
                                  return [true, ''];
                            }

                     });
                    </script>
      
      
      #end##

      #elseif ($perc.isEditMode())
      #createEmptyWidgetContent("calendar-sample-content", "This Calendar widget is showing sample content.")
      #end
      </div>]]>
  </Content>
</Widget>
